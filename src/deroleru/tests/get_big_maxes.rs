
// Guillaume Valadon <guillaume.valadon@ssi.gouv.fr>
//
// deroleru - Detect Route Leaks in Rust - deroleru::get_big_maxes() unit tests
//


extern crate deroleru;


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn conflicts_2_1_23_0f6_0f9_as16637() {
        let params = deroleru::Parameters {
            prefixes_peak_min_value: 2,
            conflicts_peak_min_value: 1,
            max_nb_peaks: 23,
            similarity: 0.6,
            percent_std: 0.9,
            flat: false,
        };

        let values =
            vec![6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5,
                 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 8, 6, 5, 5, 5, 11, 5, 13, 5, 5, 5,
                 5, 5, 5, 5, 15, 5, 6, 12, 18, 14, 12, 6, 6, 6, 13, 10, 9, 9, 9, 10, 6, 14, 14, 6,
                 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6,
                 6, 6, 5, 6, 8, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 6, 5, 5, 4, 4, 4, 5, 5, 5, 4, 4, 4,
                 4, 4, 4, 4, 5, 5, 4, 5, 5, 7, 5, 9, 4, 8, 6, 9, 5, 5, 6, 6, 7, 6, 6, 6, 12, 6, 6,
                 6, 6, 6, 6, 13, 6, 7, 7, 13, 14, 13, 15, 14, 13, 13, 25, 20, 20, 6, 5, 5, 5, 5,
                 5, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 4, 4, 4,
                 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 13, 6, 12, 12, 5,
                 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 14,
                 15, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 8, 6, 7, 7, 7, 7, 7, 8, 9, 8, 7, 7, 7, 7, 7, 7,
                 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                 3, 3, 4, 3, 3, 4, 2, 3, 3, 4, 4, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0];

        let (local_maxes, variations, absolute_max) = deroleru::pre_computations(&values);
        println!("{:?}", local_maxes);
        assert!(local_maxes ==
                vec![4, 12, 16, 18, 31, 40, 42, 47, 49, 57, 61, 67, 72, 90, 105, 113, 135, 167,
                     169, 171, 173, 178, 182, 189, 194, 196, 200, 209, 227, 249, 252, 256, 266,
                     288, 297, 299, 307, 344, 347]);
        println!("{:?}", variations);
        assert!(variations ==
                vec![0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
                     0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 2, 1, 0, 0, 6, 6, 8, 8,
                     0, 0, 0, 0, 0, 0, 10, 10, 1, 6, 6, 4, 2, 6, 0, 0, 7, 3, 1, 0, 0, 1, 4, 8, 0,
                     8, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1,
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
                     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 2, 4, 5, 4, 2, 3, 4, 0,
                     1, 0, 1, 1, 0, 0, 6, 6, 0, 0, 0, 0, 0, 7, 7, 1, 0, 6, 1, 1, 2, 1, 1, 0, 12,
                     5, 0, 14, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                     0, 2, 2, 0, 0, 8, 7, 6, 0, 7, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, 8, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 2,
                     1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                     0, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 0,
                     1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3]);
        println!("{}", absolute_max);
        assert!(absolute_max == 25);
        assert!(local_maxes.is_empty() == false);

        // Get maximums
        let big_maxes = deroleru::get_big_maxes(local_maxes,
                                                variations,
                                                &values,
                                                absolute_max,
                                                &params,
                                                params.conflicts_peak_min_value);
        println!("{:?}", big_maxes);
        assert!(big_maxes == vec![57, 61, 200]);
    }


    #[test]
    fn conflicts_2_3_18_0f6_0f9_as16637() {
        let params = deroleru::Parameters {
            prefixes_peak_min_value: 2,
            conflicts_peak_min_value: 3,
            max_nb_peaks: 18,
            similarity: 0.6,
            percent_std: 0.9,
            flat: false,
        };

        let values =
            vec![6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 5, 5, 5,
                 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 8, 6, 5, 5, 5, 11, 5, 13, 5, 5, 5,
                 5, 5, 5, 5, 15, 5, 6, 12, 18, 14, 12, 6, 6, 6, 13, 10, 9, 9, 9, 10, 6, 14, 14, 6,
                 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6,
                 6, 6, 5, 6, 8, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 6, 5, 5, 4, 4, 4, 5, 5, 5, 4, 4, 4,
                 4, 4, 4, 4, 5, 5, 4, 5, 5, 7, 5, 9, 4, 8, 6, 9, 5, 5, 6, 6, 7, 6, 6, 6, 12, 6, 6,
                 6, 6, 6, 6, 13, 6, 7, 7, 13, 14, 13, 15, 14, 13, 13, 25, 20, 20, 6, 5, 5, 5, 5,
                 5, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 4, 4, 4,
                 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 13, 6, 12, 12, 5,
                 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 14,
                 15, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 8, 6, 7, 7, 7, 7, 7, 8, 9, 8, 7, 7, 7, 7, 7, 7,
                 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                 3, 3, 4, 3, 3, 4, 2, 3, 3, 4, 4, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0];

        let (local_maxes, variations, absolute_max) = deroleru::pre_computations(&values);
        println!("{:?}", local_maxes);
        assert!(local_maxes ==
                vec![4, 12, 16, 18, 31, 40, 42, 47, 49, 57, 61, 67, 72, 90, 105, 113, 135, 167,
                     169, 171, 173, 178, 182, 189, 194, 196, 200, 209, 227, 249, 252, 256, 266,
                     288, 297, 299, 307, 344, 347]);
        println!("{:?}", variations);
        assert!(variations ==
                vec![0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
                     0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 3, 2, 1, 0, 0, 6, 6, 8, 8,
                     0, 0, 0, 0, 0, 0, 10, 10, 1, 6, 6, 4, 2, 6, 0, 0, 7, 3, 1, 0, 0, 1, 4, 8, 0,
                     8, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1,
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
                     0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 2, 4, 5, 4, 2, 3, 4, 0,
                     1, 0, 1, 1, 0, 0, 6, 6, 0, 0, 0, 0, 0, 7, 7, 1, 0, 6, 1, 1, 2, 1, 1, 0, 12,
                     5, 0, 14, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                     0, 2, 2, 0, 0, 8, 7, 6, 0, 7, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, 8, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 2,
                     1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                     0, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 0,
                     1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3]);
        println!("{}", absolute_max);
        assert!(absolute_max == 25);
        assert!(local_maxes.is_empty() == false);

        // Get maximums
        let big_maxes = deroleru::get_big_maxes(local_maxes,
                                                variations,
                                                &values,
                                                absolute_max,
                                                &params,
                                                params.conflicts_peak_min_value);
        println!("{:?}", big_maxes);
        assert!(big_maxes == vec![57, 61, 200]);
    }

    #[test]
    fn conflicts_4_1_19_0f6_0f9_as39442() {
        let params = deroleru::Parameters {
            prefixes_peak_min_value: 4,
            conflicts_peak_min_value: 1,
            max_nb_peaks: 19,
            similarity: 0.6,
            percent_std: 1.0,
            flat: false,
        };

        let values =
            vec![2, 2, 2, 3, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];


        let (local_maxes, variations, absolute_max) = deroleru::pre_computations(&values);
        println!("{:?}", local_maxes);
        assert!(local_maxes == vec![5, 7, 9, 42, 47, 49, 258, 345]);
        println!("{:?}", variations);
        assert!(variations ==
                vec![0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 1, 1,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        println!("{}", absolute_max);
        assert!(absolute_max == 4);
        assert!(local_maxes.is_empty() == false);

        // Get maximums
        let big_maxes = deroleru::get_big_maxes(local_maxes,
                                                variations,
                                                &values,
                                                absolute_max,
                                                &params,
                                                params.conflicts_peak_min_value);
        println!("{:?}", big_maxes);
        assert!(big_maxes == vec![42, 47]);
    }
}
